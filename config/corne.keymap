/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>

#define QUICK_TAP_MS 175

&mt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};

&sk {
    release-after-ms = <900>;
    quick-release;
};

&sl { // Allow sticky mods to chord across sticky layers.
    ignore-modifiers;
};

&lt {
    flavor = "balanced";
    tapping-term-ms = <200>;
    quick-tap-ms = <QUICK_TAP_MS>;
};


/* Homerow mods */
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5
#define THUMBS LH2 LH1 LH0 RH0 RH1 RH2 // Thumbs on 36+ keys.

#define MAKE_HRM(NAME, HOLD, TAP, TRIGGER_POS)                                 \
    ZMK_HOLD_TAP(NAME, bindings = <HOLD>, <TAP>; flavor = "balanced";            \
        tapping-term-ms = <280>; quick-tap-ms = <QUICK_TAP_MS>;         \
        require-prior-idle-ms = <150>; hold-trigger-on-release;         \
        hold-trigger-key-positions = <TRIGGER_POS>;)

MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS) // Left-hand HRMs.
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS) // Right-hand HRMs.


/ {
    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  Q  |  W  |  E  |  R  |  T  |   |  Y  |  U   |  I  |  O  |  P  | BKSP |
            // | CTRL |  A  |  S  |  D  |  F  |  G  |   |  H  |  J   |  K  |  L  |  ;  |  '   |
            // | SHFT |  Z  |  X  |  C  |  V  |  B  |   |  N  |  M   |  ,  |  .  |  /  | ESC  |
            //                    | GUI | LWR | SPC |   | ENT | RSE  | ALT |

            bindings = <
&kp ESC                   &kp Q       &kp W       &kp E        &kp R        &kp T           &kp Y        &kp U            &kp I         &kp O       &kp P               &kp LEFT_BRACKET
&mt LEFT_SHIFT TAB        &hml LGUI A  &hml LALT S  &hml LSHFT D  &hml LCTRL F  &kp G           &kp H        &hmr RCTRL J      &hmr RSHFT K   &hmr RALT L  &hmr RGUI SEMICOLON  &mt RIGHT_SHIFT SQT
&mt LEFT_CONTROL K_CMENU  &kp Z       &kp X       &kp C        &kp V        &kp B           &kp N        &kp M            &kp COMMA     &kp DOT     &kp FSLH            &mt RIGHT_CONTROL RIGHT_BRACKET
                                                  &kp LGUI     &lt 1 SPACE  &kp LEFT_ALT    &lt 2 ENTER  &lt 1 BACKSPACE  &lt 3 DELETE
            >;
        };

        lower_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  1  |  2  |  3  |  4  |  5  |   |  6  |  7  |  8  |  9  |  0  | BKSP |
            // | BTCLR| BT1 | BT2 | BT3 | BT4 | BT5 |   | LFT | DWN |  UP | RGT |     |      |
            // | SHFT |     |     |     |     |     |   |     |     |     |     |     |      |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESC     &kp N1             &kp N2           &kp N3      &kp N4          &kp N5          &kp N6     &kp N7         &kp N8       &kp N9     &kp N0           &trans
&kp LSHIFT  &kp N6             &kp N7           &kp N8      &kp N9          &kp N0          &kp LEFT   &kp DOWN       &kp UP       &kp RIGHT  &kp ESCAPE       &kp ENTER
&kp LCTRL   &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp K_MUTE  &kp LS(INSERT)  &kp LC(A)       &kp HOME   &kp PAGE_DOWN  &kp PAGE_UP  &kp END    &kp PRINTSCREEN  &kp RIGHT_CONTROL
                                                &kp LGUI    &kp SPACE       &kp LEFT_ALT    &kp ENTER  &kp BACKSPACE  &kp DELETE
            >;
        };

        raise_layer {
            // -----------------------------------------------------------------------------------------
            // |  TAB |  !  |  @  |  #  |  $  |  %  |   |  ^  |  &  |  *  |  (  |  )  | BKSP |
            // | CTRL |     |     |     |     |     |   |  -  |  =  |  [  |  ]  |  \  |  `   |
            // | SHFT |     |     |     |     |     |   |  _  |  +  |  {  |  }  | "|" |  ~   |
            //                    | GUI |     | SPC |   | ENT |     | ALT |

            bindings = <
&kp ESC           &kp EXCL           &kp AT           &kp HASH      &kp DLLR      &kp PRCNT       &kp CARET  &kp AMPS       &kp STAR       &kp LPAR          &kp RPAR           &kp BACKSPACE
&kp LSHIFT        &bt BT_SEL 0       &bt BT_SEL 1     &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR      &kp MINUS  &kp EQUAL      &kp BACKSLASH  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp GRAVE
&kp LEFT_CONTROL  &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp K_MUTE    &trans        &kp C_PAUSE     &kp UNDER  &kp PLUS       &kp PIPE       &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp TILDE
                                                      &kp LGUI      &kp SPACE     &kp LEFT_ALT    &trans     &kp BACKSPACE  &kp DELETE
            >;
        };

        function {
            bindings = <
&kp ESC     &kp F1             &kp F2           &kp F3      &kp F4     &kp F5          &kp KP_NUMLOCK  &kp C_POWER        &trans  &trans  &kp MINUS  &kp BACKSPACE
&kp LSHIFT  &kp F6             &kp F7           &kp F8      &kp F9     &kp F10         &kp SLASH       &trans             &trans  &trans  &kp PLUS   &kp RSHIFT
&kp LCTRL   &kp C_VOLUME_DOWN  &kp C_VOLUME_UP  &kp K_MUTE  &kp F11    &kp F12         &kp ASTERISK    &kp RIGHT_BRACKET  &trans  &trans  &kp ENTER  &kp RCTRL
                                                &kp LGUI    &kp SPACE  &kp LEFT_ALT    &kp ENTER       &kp BACKSPACE      &trans
            >;
        };
    };
};
